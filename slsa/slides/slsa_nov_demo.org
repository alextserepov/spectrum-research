#+TITLE: Supply Chain Security
#+AUTHOR: Aleksandr Tserepov-Savolainen
#+OPTIONS: H:2 toc:t num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Singapore
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)

* Supply Chain Security

** Problem statement
[[file:./images/supply-chain-threats.png]]

** Breach cases

TODO: Example breach cases here

** SLSA Framework
*** Source Integrity
Ensuring every change reflects the intent of producer.

*** Build Integrity
    :PROPERTIES:
    :BEAMER_ACT: <2->
    :END:
Ensuring artifacts are not modified on transit between stages of the Supply Chain.

*** Availability
    :PROPERTIES:
    :BEAMER_ACT: <3->
    :END:
Ensuring that all code and change history are available for potential incident investigation.

** Levels of Assurance
*** Level 1
    :PROPERTIES:
    :BEAMER_ACT: <2->
    :END:
Easy to adopt, offering supply chain visibility and generating provenance
*** Level 2
    :PROPERTIES:
    :BEAMER_ACT: <3->
    :END:
Minimal build integrity, minimal SW tampering protection
*** Level 3
    :PROPERTIES:
    :BEAMER_ACT: <4->
    :END:
Hardened infrastructure, trust integration
*** Level 4
    :PROPERTIES:
    :BEAMER_ACT: <5->
    :END:
The highest assurance of build integrity and dependency management

** NixOS / Spectrum Build Environment
TODO: Build environment picture

Hydra -> BinCache -> Jenkins -> Release
  
  + --- TII GitHub
  + --- OpenSrc locations 

** Nix Tooling SLSA Solution
- package signing during build
- Package signing during sharing
- Package signature verification during testing stages

* SCA, SBOM & Vulnix

** SCA (Software Composition Analysis)
- Automated process that defines the open source software in the codebase.
- Companies need to be aware of potential obligations, limitations and security vulnerabilities that open source brings into play.
- As the codebase grows, tracking all of those becomes rather tricky.
- SCA takes use of automatic scanners to enable productivity without compromise on security.

** SBOM (Software Bill of Materials)
- List of software components in a derivation
- Generated at the build time by the build system
- Serves as part of build provenance
- Stored inside of the software package
- Is signed at the build stage

** [Vulnix] Theory of operation
- Pulls all known CVEs from NVD
- Matches a list of derivations against CVE entries
- Whitelisting is used to suppress unwanted results
